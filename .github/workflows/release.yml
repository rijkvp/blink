name: Release

on:
  push:
    tags:
      - 'v[0-9]+.*'

jobs:
  release_build:
    name: "Release build"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Install dependenciecs (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install --no-install-recommends -y libasound2-dev xorg-dev upx-ucl

      - name: Install dependenciecs (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install upx -y

      - name: Set OS build target
        run:  |
              echo "ARCHITECTURE=x86_64" >> $GITHUB_ENV
              if [ "$RUNNER_OS" == "Linux" ]; then
                  echo "TARGET=x86_64-unknown-linux-gnu" >> $GITHUB_ENV
              elif [ "$RUNNER_OS" == "Windows" ]; then
                  echo "TARGET=x86_64-pc-windows-msvc" >> $GITHUB_ENV
              else
                  echo "$RUNNER_OS not supported"
              fi
        shell: bash

      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ env.TARGET }}
          toolchain: nightly
          profile: minimal
          components: rust-src
          override: true

      - name: Release mode build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -Z build-std=std,panic_abort -Z build-std-features=panic_immediate_abort --target  ${{ env.TARGET }} --release --verbose

      - name: Rename binary
        run: |
          OS_NAME=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')
          if [ "$RUNNER_OS" == "Windows" ]; then
            OUTPUT="$GITHUB_WORKSPACE\target\${{ env.TARGET }}\release\blink-timer.exe"
            FILE_NAME="blink-$OS_NAME-${{ env.ARCHITECTURE }}-${{ github.ref_name }}.exe"
            FILE_PATH="$GITHUB_WORKSPACE\\$FILE_NAME"
          else
            OUTPUT="$GITHUB_WORKSPACE/target/${{ env.TARGET }}/release/blink-timer"
            FILE_NAME="blink-$OS_NAME-${{ env.ARCHITECTURE }}-${{ github.ref_name }}"
            FILE_PATH="$GITHUB_WORKSPACE/$FILE_NAME"
          fi 
          echo "Output: $OUTPUT"
          echo "File name: $FILE_NAME"
          echo "File path: $FILE_PATH"
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV
          echo "FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
          cp $OUTPUT $FILE_PATH
        shell: bash
      
      - name: Compress binary
        run: upx --best --lzma $FILE_PATH
        shell: bash

      - name: Uppload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FILE_NAME }}
          path: ${{ env.FILE_NAME }} 
  release:
    name: Release
    needs: release_build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
      - name: List files
        run: pwd && ls -R
      - name: Create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: "./*"
